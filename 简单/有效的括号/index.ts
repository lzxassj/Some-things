/**
 * @param {string} s
 * @return {boolean}
 *
 * 找括号，好比咱们在排查代码（删除法），由于某个小伙伴写了一大串代码，这个时候出问题了，我们只能从内往外删除代码段（有{}组成的代码），最终我们找到了问题。
 * 我举这个例子，其实想表达的一种方法，就是从内部逐对删除，因为一串多种括号组成的字符串（整体表达式），其实由N个括号对（子表达式）组成。
 * 但是我们检查字符串的有效性无法定位出从哪个位置开始，所以采用栈的方式，新进后出，后进先出，每次循环拿栈顶元素和当前循环对象做对比（其实先判断子表达式），如果是括号对，那么顶部元素出栈，否则当前循环对象压入栈顶，最终如果栈长度为0，那么说明就是有效字符串，反之无效。
 */
var isValid = function (s) {
  if (s === "") {
    return true;
  }

  const map = {
    "(": ")",
    "[": "]",
    "{": "}",
  };
  const arr = [];

  arr.push(s[0]);
  for (let i = 1; i < s.length; i++) {
    if (map[arr[arr.length - 1]] === s[i]) {
      arr.pop();
    } else {
      arr.push(s[i]);
    }
  }
  return arr.length ? false : true;
};
